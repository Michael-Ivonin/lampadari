"use strict";

document.addEventListener("DOMContentLoaded", function () {
  /* Modal */
  (function showHideModal() {
    var body = document.body;
    var trigger = body.querySelector(".trigger");
    var modal = body.querySelector(".modal-bg");
    var close = modal.querySelector(".modal__close");
    trigger.addEventListener("click", function (event) {
      event.preventDefault();
      modal.classList.toggle("modal-bg_open");
      body.classList.toggle("body_fixed");
    });
    modal.addEventListener("click", function (event) {
      if (event.target === modal) {
        modal.classList.toggle("modal-bg_open");
        body.classList.toggle("body_fixed");
      }
    });
    close.addEventListener("click", function (event) {
      event.preventDefault();
      modal.classList.toggle("modal-bg_open");
      body.classList.toggle("body_fixed");
    });
  })();
  /* Polyfill the Array.from() */


  if (!Array.from) {
    Array.from = function () {
      var toStr = Object.prototype.toString;

      var isCallable = function isCallable(fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
      };

      var toInteger = function toInteger(value) {
        var number = Number(value);

        if (isNaN(number)) {
          return 0;
        }

        if (number === 0 || !isFinite(number)) {
          return number;
        }

        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
      };

      var maxSafeInteger = Math.pow(2, 53) - 1;

      var toLength = function toLength(value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger);
      }; // The length property of the from method is 1.


      return function from(arrayLike
      /*, mapFn, thisArg */
      ) {
        // 1. Let C be the this value.
        var C = this; // 2. Let items be ToObject(arrayLike).

        var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).

        if (arrayLike == null) {
          throw new TypeError('Array.from requires an array-like object - not null or undefined');
        } // 4. If mapfn is undefined, then let mapping be false.


        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        var T;

        if (typeof mapFn !== 'undefined') {
          // 5. else
          // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
          if (!isCallable(mapFn)) {
            throw new TypeError('Array.from: when provided, the second argument must be a function');
          } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.


          if (arguments.length > 2) {
            T = arguments[2];
          }
        } // 10. Let lenValue be Get(items, "length").
        // 11. Let len be ToLength(lenValue).


        var len = toLength(items.length); // 13. If IsConstructor(C) is true, then
        // 13. a. Let A be the result of calling the [[Construct]] internal method
        // of C with an argument list containing the single item len.
        // 14. a. Else, Let A be ArrayCreate(len).

        var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.

        var k = 0; // 17. Repeat, while k < lenâ€¦ (also steps a - h)

        var kValue;

        while (k < len) {
          kValue = items[k];

          if (mapFn) {
            A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
          } else {
            A[k] = kValue;
          }

          k += 1;
        } // 18. Let putStatus be Put(A, "length", len, true).


        A.length = len; // 20. Return A.

        return A;
      };
    }();
  }
  /* Slider */


  function Slider(element, duration, DisplayedSlide) {
    var slider = document.querySelector(element),
        list = slider.querySelector(".slider__list"),
        slideWidth = -100,
        dots = slider.querySelector(".slider__dots");
    var selectedDot,
        isDisabled = false;
    list.style.marginLeft = "".concat((DisplayedSlide - 1) * slideWidth, "vw");

    function highlight(item) {
      if (selectedDot) {
        selectedDot.classList.toggle("slider__dot_active");
      }

      selectedDot = item;
      selectedDot.classList.toggle("slider__dot_active");
    }

    highlight(dots.children[DisplayedSlide - 1]);

    function animate(_ref) {
      var _ref$duration = _ref.duration,
          duration = _ref$duration === void 0 ? 250 : _ref$duration,
          timing = _ref.timing,
          draw = _ref.draw;
      var start = performance.now();
      requestAnimationFrame(function animate(time) {
        var timeFraction = (time - start) / duration;
        if (timeFraction > 1) timeFraction = 1;
        var progress = timing(timeFraction);
        draw(progress);

        if (timeFraction < 1) {
          requestAnimationFrame(animate);
        } else {
          isDisabled = false;
        }
      });
    }

    function moveRight(multiplier, previous) {
      animate({
        duration: duration,
        timing: function timing(timeFraction) {
          return timeFraction;
        },
        draw: function draw(progress) {
          list.style.marginLeft = "".concat(progress * (multiplier * slideWidth) + previous * slideWidth, "vw");
        }
      });
    }

    function moveLeft(multiplier, previous) {
      animate({
        duration: duration,
        timing: function timing(timeFraction) {
          return timeFraction;
        },
        draw: function draw(progress) {
          list.style.marginLeft = "".concat(progress * (multiplier * slideWidth) + previous * slideWidth, "vw");
        }
      });
    }

    dots.addEventListener("click", function (event) {
      var target = event.target;
      if (target.tagName !== "LI") return false;
      if (target === selectedDot) return false;
      if (isDisabled) return false;
      isDisabled = true;
      var next = Array.from(dots.children).indexOf(target);
      var previous = Array.from(dots.children).indexOf(selectedDot);
      var multiplier = next - previous;

      if (multiplier > 0) {
        moveLeft(multiplier, previous);
      }

      if (multiplier < 0) {
        moveRight(multiplier, previous);
      }

      highlight(target);
    });
  }

  var carousel = new Slider(".slider", 500, 2);
  /* Bottom box */

  (function showHideBottomBox() {
    var bottomBox = document.querySelector(".bottom-box");
    var buttonOpenBox = bottomBox.querySelector(".bottom-box__button");
    buttonOpenBox.addEventListener("click", function () {
      buttonOpenBox.firstElementChild.classList.toggle("bottom-box__icon-arrow_down");
      bottomBox.classList.toggle("bottom-box_visible");
    });
  })();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
